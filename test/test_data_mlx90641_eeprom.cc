#include "test_data_mlx90641_eeprom.hh"

namespace mlx90641 {
const std::array<uint16_t, 832> test_eeprom_data = {
0x00B7, 0x799F, 0x0000, 0x2031, 0x0004, 0x0320, 0x03E0, 0x101C, 
    0x15E3, 0x018A, 0x0ACD, 0x0000, 0x0901, 0x0000, 0x0000, 0xBE33, 
    0x0000, 0x07F5, 0x001B, 0x0000, 0x0000, 0x03AA, 0x0243, 0x0293, 
    0x0164, 0x018C, 0x018C, 0x018C, 0x043B, 0x04E0, 0x0523, 0x0538, 
    0x04ED, 0x043A, 0x07DA, 0x0200, 0x00F0, 0x0005, 0x0679, 0x079E, 
    0x0164, 0x0016, 0x0129, 0x0007, 0x0540, 0x026B, 0x0022, 0x07F1, 
    0x0000, 0x0359, 0x0198, 0x0420, 0x0013, 0x0000, 0x0000, 0x0763, 
    0x06FA, 0x0628, 0x00FA, 0x04EE, 0x0190, 0x0485, 0x0258, 0x041C, 
    0x0003, 0x0011, 0x0014, 0x0018, 0x000D, 0x000E, 0x000D, 0x0011, 
    0x0007, 0x000C, 0x000B, 0x000D, 0x0000, 0x07F5, 0x07EE, 0x07F9, 
    0x0030, 0x0022, 0x0023, 0x001A, 0x001B, 0x0020, 0x0023, 0x0015, 
    0x001B, 0x0018, 0x001F, 0x0011, 0x0010, 0x0011, 0x0013, 0x07FB, 
    0x0009, 0x000C, 0x000F, 0x0018, 0x0011, 0x000E, 0x0007, 0x0015, 
    0x000A, 0x000C, 0x000C, 0x0015, 0x0004, 0x07FF, 0x07FF, 0x0000, 
    0x002A, 0x001B, 0x001E, 0x0017, 0x0017, 0x001A, 0x001E, 0x0014, 
    0x0012, 0x0015, 0x001E, 0x0014, 0x0013, 0x0014, 0x0016, 0x0008, 
    0x0001, 0x0008, 0x000B, 0x0012, 0x0008, 0x0007, 0x0007, 0x0010, 
    0x07FD, 0x000B, 0x0009, 0x0016, 0x0002, 0x0006, 0x07FF, 0x000E, 
    0x0020, 0x000F, 0x001A, 0x0008, 0x000D, 0x000E, 0x0018, 0x000B, 
    0x000D, 0x0011, 0x001C, 0x000D, 0x0014, 0x0019, 0x0018, 0x0011, 
    0x07EE, 0x07F3, 0x07F4, 0x07FE, 0x07FE, 0x07F5, 0x07F7, 0x0000, 
    0x07F9, 0x07FB, 0x0002, 0x000D, 0x0004, 0x0004, 0x0005, 0x0011, 
    0x0004, 0x07FA, 0x07FD, 0x07FD, 0x07FA, 0x0002, 0x000B, 0x07FD, 
    0x0001, 0x0008, 0x0013, 0x000C, 0x000E, 0x0014, 0x0017, 0x0018, 
    0x07D3, 0x07D5, 0x07DC, 0x07EA, 0x07E8, 0x07DE, 0x07E4, 0x07F3, 
    0x07EF, 0x07F0, 0x07F8, 0x0005, 0x07FD, 0x07FC, 0x0003, 0x001B, 
    0x07DE, 0x07D7, 0x07E2, 0x07D9, 0x07E2, 0x07E8, 0x07ED, 0x07EB, 
    0x07EE, 0x07FA, 0x0004, 0x0001, 0x0003, 0x0012, 0x001A, 0x0017, 
    0x07AA, 0x07AF, 0x07BB, 0x07C4, 0x07C5, 0x07C2, 0x07C7, 0x07D7, 
    0x07D6, 0x07D2, 0x07E8, 0x07F1, 0x07F7, 0x07F4, 0x07F7, 0x001B, 
    0x0797, 0x0791, 0x079C, 0x0794, 0x079A, 0x07A8, 0x07AD, 0x07AC, 
    0x07B5, 0x07CA, 0x07DD, 0x07D6, 0x07F4, 0x07FC, 0x0009, 0x0008, 
    0x047E, 0x0506, 0x057D, 0x0616, 0x0698, 0x06F3, 0x0730, 0x0730, 
    0x0716, 0x06E6, 0x067F, 0x060F, 0x0590, 0x052F, 0x047D, 0x0306, 
    0x04E9, 0x057E, 0x0626, 0x06B7, 0x073B, 0x0797, 0x07CA, 0x07FF, 
    0x07D5, 0x07CB, 0x072E, 0x06C4, 0x0647, 0x05A7, 0x04D9, 0x0426, 
    0x048A, 0x0538, 0x05C7, 0x0657, 0x06D1, 0x0733, 0x077B, 0x077A, 
    0x0767, 0x0733, 0x06C7, 0x065F, 0x05E7, 0x0553, 0x04A3, 0x0405, 
    0x04D9, 0x0584, 0x0623, 0x06A5, 0x0738, 0x0797, 0x07CE, 0x07D3, 
    0x07FE, 0x07D5, 0x0745, 0x06C6, 0x0647, 0x05A4, 0x04E1, 0x043A, 
    0x04C1, 0x055F, 0x05F6, 0x0695, 0x0728, 0x0784, 0x07B0, 0x07D7, 
    0x07E4, 0x0787, 0x0723, 0x06A0, 0x0638, 0x0597, 0x04DA, 0x042B, 
    0x04CA, 0x0588, 0x0602, 0x06C5, 0x074C, 0x07B6, 0x07CE, 0x07EF, 
    0x07FE, 0x07DF, 0x073C, 0x06E2, 0x0649, 0x059E, 0x04F0, 0x043D, 
    0x04B9, 0x0585, 0x061D, 0x06C4, 0x0731, 0x079D, 0x07DB, 0x07FD, 
    0x07E4, 0x07CF, 0x073B, 0x06BE, 0x0621, 0x059C, 0x04E6, 0x0437, 
    0x04B1, 0x0563, 0x05FA, 0x0671, 0x070E, 0x076A, 0x078C, 0x07C6, 
    0x07B5, 0x079E, 0x0700, 0x0687, 0x060B, 0x0573, 0x04C2, 0x0414, 
    0x04CE, 0x058C, 0x0628, 0x06AA, 0x0735, 0x07CA, 0x07D2, 0x07FE, 
    0x07D3, 0x07BF, 0x072A, 0x06B4, 0x0624, 0x05A4, 0x04E6, 0x0431, 
    0x0497, 0x0539, 0x05B4, 0x0646, 0x06BA, 0x0733, 0x0758, 0x0770, 
    0x076E, 0x073E, 0x06BA, 0x0640, 0x05D7, 0x0537, 0x047F, 0x03E4, 
    0x04E9, 0x05A6, 0x060F, 0x06C7, 0x073C, 0x07C5, 0x07DE, 0x07FE, 
    0x07DE, 0x07DC, 0x0726, 0x06D4, 0x0639, 0x05B3, 0x04F3, 0x03D2, 
    0x046B, 0x0525, 0x058C, 0x0620, 0x0694, 0x06ED, 0x0722, 0x073F, 
    0x0742, 0x06F9, 0x068C, 0x0652, 0x05B2, 0x052D, 0x0468, 0x0298, 
    0x079F, 0x06E1, 0x0700, 0x06E0, 0x06A1, 0x0682, 0x06C1, 0x073F, 
    0x073E, 0x0780, 0x07DF, 0x07BF, 0x005F, 0x001F, 0x07FF, 0x0102, 
    0x06E7, 0x0683, 0x0643, 0x06C2, 0x06C2, 0x06A1, 0x0662, 0x0700, 
    0x06E0, 0x06A2, 0x06C2, 0x079F, 0x07BF, 0x0781, 0x07A2, 0x0063, 
    0x07C0, 0x0762, 0x0742, 0x0762, 0x0761, 0x0761, 0x0780, 0x0720, 
    0x079F, 0x079F, 0x075F, 0x07C1, 0x005E, 0x003F, 0x0000, 0x00C3, 
    0x0708, 0x0704, 0x06E4, 0x0721, 0x0721, 0x06E2, 0x0742, 0x0701, 
    0x06E1, 0x06E1, 0x0722, 0x077F, 0x07BF, 0x0781, 0x07C2, 0x0002, 
    0x07A3, 0x0783, 0x07A2, 0x07E0, 0x0780, 0x07E0, 0x0780, 0x0780, 
    0x07BD, 0x003F, 0x07FF, 0x0020, 0x07FE, 0x0020, 0x003F, 0x00E2, 
    0x0749, 0x06E6, 0x07A5, 0x0782, 0x0782, 0x0781, 0x0762, 0x0701, 
    0x07A0, 0x0721, 0x0761, 0x077F, 0x07BF, 0x07E1, 0x07A2, 0x0001, 
    0x0083, 0x07E3, 0x07E3, 0x0003, 0x0041, 0x0021, 0x07E0, 0x0000, 
    0x00BD, 0x0020, 0x003E, 0x009F, 0x005D, 0x005F, 0x001F, 0x0042, 
    0x000A, 0x07C6, 0x07A5, 0x0022, 0x0021, 0x0041, 0x0021, 0x0020, 
    0x001F, 0x07A0, 0x07A1, 0x07FE, 0x07FF, 0x07E1, 0x0742, 0x0001, 
    0x00E6, 0x0085, 0x0084, 0x00E2, 0x0100, 0x013F, 0x00BF, 0x011E, 
    0x011D, 0x00FD, 0x007E, 0x009E, 0x00BC, 0x003E, 0x07FF, 0x0081, 
    0x006C, 0x0087, 0x00A6, 0x00C2, 0x00C1, 0x00C2, 0x0042, 0x009E, 
    0x00BE, 0x00BF, 0x003F, 0x001D, 0x07FE, 0x07A1, 0x07E0, 0x07A0, 
    0x0148, 0x0145, 0x0103, 0x0143, 0x01BF, 0x017F, 0x019E, 0x01FE, 
    0x01BB, 0x013C, 0x00DD, 0x007D, 0x011C, 0x005E, 0x077D, 0x07C0, 
    0x018C, 0x0187, 0x01C3, 0x01C0, 0x021E, 0x01DE, 0x017D, 0x017D, 
    0x01BB, 0x011C, 0x00BE, 0x07DC, 0x009D, 0x07FF, 0x0700, 0x0700, 
    0x0004, 0x0010, 0x0014, 0x0018, 0x000E, 0x000D, 0x000D, 0x0011, 
    0x0007, 0x000B, 0x000A, 0x000D, 0x0000, 0x07F5, 0x07ED, 0x07F9, 
    0x0030, 0x0021, 0x0022, 0x001B, 0x001C, 0x001F, 0x0023, 0x0016, 
    0x001C, 0x0017, 0x001F, 0x0011, 0x0011, 0x0010, 0x0012, 0x07FB, 
    0x000A, 0x000B, 0x000F, 0x0018, 0x0011, 0x000D, 0x0007, 0x0015, 
    0x000A, 0x000C, 0x000B, 0x0015, 0x0005, 0x07FE, 0x07FE, 0x07FF, 
    0x002A, 0x001A, 0x001E, 0x0018, 0x0018, 0x0019, 0x001E, 0x0015, 
    0x0012, 0x0015, 0x001E, 0x0014, 0x0013, 0x0013, 0x0015, 0x0007, 
    0x0002, 0x0007, 0x000B, 0x0013, 0x000A, 0x0006, 0x0007, 0x0010, 
    0x07FE, 0x000A, 0x000A, 0x0017, 0x0003, 0x0004, 0x07FF, 0x000F, 
    0x0021, 0x000F, 0x001A, 0x0009, 0x000E, 0x000D, 0x0017, 0x000C, 
    0x000E, 0x0010, 0x001D, 0x000E, 0x0015, 0x0018, 0x0019, 0x0011, 
    0x07EE, 0x07F2, 0x07F4, 0x07FE, 0x07FE, 0x07F5, 0x07F6, 0x0000, 
    0x07FA, 0x07FB, 0x0001, 0x000E, 0x0005, 0x0002, 0x0004, 0x0011, 
    0x0004, 0x07F8, 0x07FC, 0x07FD, 0x07FB, 0x0001, 0x000A, 0x07FD, 
    0x0002, 0x0007, 0x0013, 0x000C, 0x000F, 0x0012, 0x0017, 0x0017, 
    0x07D3, 0x07D4, 0x07DB, 0x07EA, 0x07E9, 0x07DC, 0x07E3, 0x07F3, 
    0x07F0, 0x07EE, 0x07F8, 0x0004, 0x07FD, 0x07FA, 0x0002, 0x001A, 
    0x07DF, 0x07D6, 0x07E2, 0x07D9, 0x07E2, 0x07E7, 0x07ED, 0x07EB, 
    0x07EF, 0x07F8, 0x0004, 0x0002, 0x0003, 0x0011, 0x001A, 0x0017, 
    0x07AB, 0x07AE, 0x07BB, 0x07C5, 0x07C5, 0x07C1, 0x07C7, 0x07D7, 
    0x07D7, 0x07D1, 0x07E9, 0x07F2, 0x07F9, 0x07F4, 0x07F8, 0x001C, 
    0x0797, 0x0790, 0x079C, 0x0795, 0x079B, 0x07A7, 0x07AD, 0x07AC, 
    0x07B6, 0x07CA, 0x07DF, 0x07D8, 0x07F6, 0x07FB, 0x000A, 0x0009
};

const ParamsMLX90641 expected_params = {
    .kVdd               = -3136,
    .vdd25              = -12512,
    .KvPTAT             = 0.00170898f,
    .KtPTAT             = 37.125f,
    .vPTAT25            = 11414,
    .alphaPTAT          = 10.5f,
    .gainEE             = 7685,
    .tgc                = 0.5f,
    .cpKv               = 0.375f,
    .cpKta              = 0.00305176f,
    .resolutionEE       = 2,
    .calibrationModeEE  = 0,
    .KsTa               = -0.00115967f,
    .ksTo               = {
        0.0f, 0.0f, -0.000299454f, -0.000499725f,
        -0.000900269f, -0.00149918f, -0.00169945f, -0.00189972f
    },
    .ct                 = {
        -40, -20, 0, 80, 120, 250, 400, 600
    },
    .alpha              = {
        1.4166e-07f, 1.58413e-07f, 1.73072e-07f, 1.91919e-07f, 2.07933e-07f, 2.19143e-07f, 2.26657e-07f, 2.26657e-07f, 2.23454e-07f, 2.17541e-07f,
        2.04853e-07f, 1.91057e-07f, 1.75413e-07f, 1.63464e-07f, 1.41537e-07f, 9.53436e-08f, 1.54841e-07f, 1.73195e-07f, 1.9389e-07f, 2.11752e-07f,
        2.28012e-07f, 2.39345e-07f, 2.45627e-07f, 2.52156e-07f, 2.46982e-07f, 2.4575e-07f, 2.2641e-07f, 2.13353e-07f, 1.97955e-07f, 1.78246e-07f,
        1.5287e-07f, 1.3082e-07f, 1.64946e-07f, 1.89646e-07f, 2.09945e-07f, 2.30386e-07f, 2.47704e-07f, 2.61615e-07f, 2.71835e-07f, 2.71693e-07f,
        2.68996e-07f, 2.61615e-07f, 2.46284e-07f, 2.31521e-07f, 2.14487e-07f, 1.93478e-07f, 1.68495e-07f, 1.46067e-07f, 1.76161e-07f, 2.00434e-07f,
        2.23004e-07f, 2.41458e-07f, 2.62324e-07f, 2.7581e-07f, 2.83617e-07f, 2.84327e-07f, 2.90431e-07f, 2.84611e-07f, 2.6417e-07f, 2.46142e-07f,
        2.28114e-07f, 2.04976e-07f, 1.77296e-07f, 1.5359e-07f, 1.82028e-07f, 2.0566e-07f, 2.28246e-07f, 2.52028e-07f, 2.74014e-07f, 2.87775e-07f,
        2.94356e-07f, 3.00189e-07f, 3.02134e-07f, 2.88224e-07f, 2.73267e-07f, 2.53673e-07f, 2.38117e-07f, 2.14036e-07f, 1.85767e-07f, 1.59593e-07f,
        1.83374e-07f, 2.11793e-07f, 2.30041e-07f, 2.59207e-07f, 2.79399e-07f, 2.95254e-07f, 2.98843e-07f, 3.03779e-07f, 3.06023e-07f, 3.01386e-07f,
        2.77006e-07f, 2.63545e-07f, 2.4066e-07f, 2.15083e-07f, 1.89058e-07f, 1.62285e-07f, 1.83719e-07f, 2.14719e-07f, 2.37817e-07f, 2.63194e-07f,
        2.79758e-07f, 2.9617e-07f, 3.05591e-07f, 3.10758e-07f, 3.06959e-07f, 3.03768e-07f, 2.81278e-07f, 2.62283e-07f, 2.38425e-07f, 2.18214e-07f,
        1.90558e-07f, 1.63965e-07f, 1.82504e-07f, 2.09553e-07f, 2.32499e-07f, 2.50582e-07f, 2.74439e-07f, 2.8842e-07f, 2.93586e-07f, 3.024e-07f,
        2.99817e-07f, 2.96322e-07f, 2.72312e-07f, 2.53925e-07f, 2.35082e-07f, 2.11984e-07f, 1.85087e-07f, 1.58646e-07f, 1.76418e-07f, 2.03669e-07f,
        2.26044e-07f, 2.4469e-07f, 2.64627e-07f, 2.85998e-07f, 2.87145e-07f, 2.93456e-07f, 2.87289e-07f, 2.8442e-07f, 2.63049e-07f, 2.46124e-07f,
        2.25471e-07f, 2.07112e-07f, 1.7986e-07f, 1.53899e-07f, 1.68529e-07f, 1.91765e-07f, 2.09407e-07f, 2.30347e-07f, 2.46985e-07f, 2.6434e-07f,
        2.69647e-07f, 2.73089e-07f, 2.72802e-07f, 2.65918e-07f, 2.46985e-07f, 2.29487e-07f, 2.14427e-07f, 1.91478e-07f, 1.65087e-07f, 1.42855e-07f,
        1.54698e-07f, 1.77958e-07f, 1.9088e-07f, 2.13525e-07f, 2.27924e-07f, 2.44785e-07f, 2.47861e-07f, 2.518e-07f, 2.47861e-07f, 2.47615e-07f,
        2.25217e-07f, 2.15125e-07f, 1.96049e-07f, 1.79558e-07f, 1.55929e-07f, 1.20362e-07f, 1.39191e-07f, 1.62082e-07f, 1.74758e-07f, 1.92973e-07f,
        2.07249e-07f, 2.18202e-07f, 2.24724e-07f, 2.28293e-07f, 2.28663e-07f, 2.19679e-07f, 2.06264e-07f, 1.99126e-07f, 1.79435e-07f, 1.63067e-07f,
        1.38822e-07f, 8.1718e-08f
    },
    .offset             = {
        std::array<std::int16_t, 192>{
            -322, -308, -305, -301, -312, -311, -312, -308, -318, -313, -314, -312, -325, -336, -343, -332, -277, -291, -290, -299, -298, -293, -290, -304, -298, -301, -294, -308, -309, -308, -306, -330,
            -316, -313, -310, -301, -308, -311, -318, -304, -315, -313, -313, -304, -321, -326, -326, -325, -283, -298, -295, -302, -302, -299, -295, -305, -307, -304, -295, -305, -306, -305, -303, -317,
            -324, -317, -314, -307, -317, -318, -318, -309, -328, -314, -316, -303, -323, -319, -326, -311, -293, -310, -299, -317, -312, -311, -301, -314, -312, -308, -297, -312, -305, -300, -301, -308,
            -343, -338, -337, -327, -327, -336, -334, -325, -332, -330, -323, -312, -321, -321, -320, -308, -321, -331, -328, -328, -331, -323, -314, -328, -324, -317, -306, -313, -311, -305, -302, -301,
            -370, -368, -361, -347, -349, -359, -353, -338, -342, -341, -333, -320, -328, -329, -322, -298, -359, -366, -355, -364, -355, -349, -344, -346, -343, -331, -321, -324, -322, -307, -299, -302,
            -411, -406, -394, -385, -384, -387, -382, -366, -367, -371, -349, -340, -334, -337, -334, -298, -430, -436, -425, -433, -427, -413, -408, -409, -400, -379, -360, -367, -337, -329, -316, -317
        },
        std::array<std::int16_t, 192>{
            -321, -309, -305, -301, -311, -312, -312, -308, -318, -314, -315, -312, -325, -336, -344, -332, -277, -292, -291, -298, -297, -294, -290, -303, -297, -302, -294, -308, -308, -309, -307, -330,
            -315, -314, -310, -301, -308, -312, -318, -304, -315, -313, -314, -304, -320, -327, -327, -326, -283, -299, -295, -301, -301, -300, -295, -304, -307, -304, -295, -305, -306, -306, -304, -318,
            -323, -318, -314, -306, -315, -319, -318, -309, -327, -315, -315, -302, -322, -321, -326, -310, -292, -310, -299, -316, -311, -312, -302, -313, -311, -309, -296, -311, -304, -301, -300, -308,
            -343, -339, -337, -327, -327, -336, -335, -325, -331, -330, -324, -311, -320, -323, -321, -308, -321, -333, -329, -328, -330, -324, -315, -328, -323, -318, -306, -313, -310, -307, -302, -302,
            -370, -369, -362, -347, -348, -361, -354, -338, -341, -343, -333, -321, -328, -331, -323, -299, -358, -367, -355, -364, -355, -350, -344, -346, -342, -333, -321, -323, -322, -308, -299, -302,
            -410, -407, -394, -384, -384, -388, -382, -366, -366, -372, -348, -339, -332, -337, -333, -297, -430, -437, -425, -432, -426, -414, -408, -409, -399, -379, -358, -365, -335, -330, -315, -316
        }
    },
    .kta                = {
        0.00345612f, 0.00330353f, 0.00333405f, 0.00330353f, 0.00324249f, 0.00321198f, 0.00327301f, 0.00336456f, 0.00336456f, 0.00345612f,
        0.00351715f, 0.00348663f, 0.00363922f, 0.00357819f, 0.00354767f, 0.00382233f, 0.00330353f, 0.00321198f, 0.00315094f, 0.00327301f,
        0.00327301f, 0.00324249f, 0.00318146f, 0.00333405f, 0.00330353f, 0.00324249f, 0.00327301f, 0.00345612f, 0.00348663f, 0.00345612f,
        0.00348663f, 0.00366974f, 0.00351715f, 0.0034256f, 0.00339508f, 0.0034256f, 0.0034256f, 0.0034256f, 0.00345612f, 0.00336456f,
        0.00345612f, 0.00345612f, 0.00339508f, 0.00351715f, 0.00363922f, 0.0036087f, 0.00357819f, 0.00376129f, 0.00333405f, 0.00333405f,
        0.00330353f, 0.00336456f, 0.00336456f, 0.00330353f, 0.00339508f, 0.00333405f, 0.00330353f, 0.00330353f, 0.00336456f, 0.0034256f,
        0.00348663f, 0.00345612f, 0.00351715f, 0.00357819f, 0.00348663f, 0.00345612f, 0.00348663f, 0.00354767f, 0.00345612f, 0.00354767f,
        0.00345612f, 0.00345612f, 0.00348663f, 0.0036087f, 0.00354767f, 0.0036087f, 0.00354767f, 0.0036087f, 0.0036087f, 0.00379181f,
        0.00339508f, 0.00330353f, 0.00348663f, 0.00345612f, 0.00345612f, 0.00345612f, 0.0034256f, 0.00333405f, 0.00348663f, 0.00336456f,
        0.0034256f, 0.0034256f, 0.00348663f, 0.00354767f, 0.00348663f, 0.00354767f, 0.00370026f, 0.00354767f, 0.00354767f, 0.00357819f,
        0.00363922f, 0.0036087f, 0.00354767f, 0.00357819f, 0.00373077f, 0.0036087f, 0.0036087f, 0.00370026f, 0.00363922f, 0.00363922f,
        0.00357819f, 0.00363922f, 0.00357819f, 0.00351715f, 0.00348663f, 0.0036087f, 0.0036087f, 0.00363922f, 0.0036087f, 0.0036087f,
        0.00357819f, 0.00348663f, 0.00348663f, 0.00354767f, 0.00354767f, 0.00354767f, 0.00339508f, 0.00357819f, 0.00379181f, 0.00370026f,
        0.00370026f, 0.00379181f, 0.00382233f, 0.00385284f, 0.00373077f, 0.00382233f, 0.00382233f, 0.00379181f, 0.00366974f, 0.00370026f,
        0.00373077f, 0.0036087f, 0.00354767f, 0.00370026f, 0.00366974f, 0.00370026f, 0.00373077f, 0.00376129f, 0.00376129f, 0.00376129f,
        0.00363922f, 0.00370026f, 0.00373077f, 0.00373077f, 0.0036087f, 0.00357819f, 0.00354767f, 0.00348663f, 0.00354767f, 0.00348663f,
        0.00388336f, 0.00388336f, 0.00382233f, 0.00388336f, 0.00397491f, 0.00391388f, 0.0039444f, 0.00403595f, 0.00397491f, 0.00385284f,
        0.00376129f, 0.00366974f, 0.00382233f, 0.00363922f, 0.0034256f, 0.00351715f, 0.0039444f, 0.0039444f, 0.00400543f, 0.00400543f,
        0.00406647f, 0.00400543f, 0.00391388f, 0.00391388f, 0.00397491f, 0.00382233f, 0.00373077f, 0.00351715f, 0.00370026f, 0.00354767f,
        0.00333405f, 0.00333405f
    },
    .kv                 = {
        0.313965f, 0.32959f, 0.321777f, 0.321777f, 0.32959f, 0.337402f, 0.32959f, 0.313965f, 0.306152f, 0.321777f,
        0.313965f, 0.313965f, 0.313965f, 0.313965f, 0.313965f, 0.337402f, 0.376465f, 0.345215f, 0.345215f, 0.337402f,
        0.337402f, 0.32959f, 0.337402f, 0.321777f, 0.321777f, 0.337402f, 0.337402f, 0.313965f, 0.313965f, 0.32959f,
        0.337402f, 0.345215f, 0.321777f, 0.337402f, 0.337402f, 0.337402f, 0.32959f, 0.32959f, 0.321777f, 0.321777f,
        0.313965f, 0.313965f, 0.313965f, 0.32959f, 0.306152f, 0.313965f, 0.321777f, 0.345215f, 0.384277f, 0.353027f,
        0.353027f, 0.32959f, 0.32959f, 0.337402f, 0.337402f, 0.32959f, 0.32959f, 0.32959f, 0.337402f, 0.313965f,
        0.313965f, 0.32959f, 0.337402f, 0.337402f, 0.345215f, 0.345215f, 0.337402f, 0.321777f, 0.321777f, 0.321777f,
        0.321777f, 0.321777f, 0.29834f, 0.313965f, 0.313965f, 0.321777f, 0.306152f, 0.321777f, 0.313965f, 0.337402f,
        0.39209f, 0.368652f, 0.36084f, 0.337402f, 0.337402f, 0.32959f, 0.337402f, 0.32959f, 0.321777f, 0.32959f,
        0.32959f, 0.313965f, 0.313965f, 0.32959f, 0.337402f, 0.32959f, 0.345215f, 0.345215f, 0.345215f, 0.345215f,
        0.32959f, 0.32959f, 0.321777f, 0.321777f, 0.29834f, 0.321777f, 0.306152f, 0.313965f, 0.29834f, 0.313965f,
        0.313965f, 0.337402f, 0.399902f, 0.368652f, 0.36084f, 0.337402f, 0.32959f, 0.32959f, 0.32959f, 0.321777f,
        0.313965f, 0.321777f, 0.32959f, 0.306152f, 0.313965f, 0.32959f, 0.337402f, 0.32959f, 0.368652f, 0.36084f,
        0.353027f, 0.337402f, 0.321777f, 0.313965f, 0.313965f, 0.306152f, 0.29834f, 0.29834f, 0.306152f, 0.306152f,
        0.290527f, 0.306152f, 0.313965f, 0.32959f, 0.415527f, 0.376465f, 0.368652f, 0.337402f, 0.32959f, 0.337402f,
        0.337402f, 0.306152f, 0.306152f, 0.313965f, 0.313965f, 0.29834f, 0.306152f, 0.32959f, 0.321777f, 0.321777f,
        0.384277f, 0.36084f, 0.345215f, 0.345215f, 0.313965f, 0.313965f, 0.306152f, 0.306152f, 0.282715f, 0.290527f,
        0.29834f, 0.29834f, 0.290527f, 0.306152f, 0.29834f, 0.321777f, 0.415527f, 0.376465f, 0.345215f, 0.321777f,
        0.306152f, 0.306152f, 0.29834f, 0.29834f, 0.282715f, 0.290527f, 0.306152f, 0.290527f, 0.29834f, 0.313965f,
        0.321777f, 0.321777f
    },
    .cpAlpha            = 3.60305e-08f,
    .cpOffset           = -480,
    .emissivityEE       = 1.0f,
    .brokenPixels       = {65535, 65535}
};
} // namespace mlx90641